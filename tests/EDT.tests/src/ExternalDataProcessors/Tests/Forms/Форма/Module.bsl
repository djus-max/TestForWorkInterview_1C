#Область НачальныеПеременные
&НаКлиенте
Перем ПУТЬ_К_ФАЙЛУ ;
#КонецОбласти


#Область ПеременныеДляТестов
&НаКлиенте
Перем ПутьКФайлу ;
#КонецОбласти


#Область НачальнаяИнициализация
&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;


&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) 			Экспорт

	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		КонтекстЯдра = КонтекстЯдраПараметр;
		Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
		Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
		СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	#КонецЕсли
	
	#Если ТонкийКлиент Тогда
		Сообщить("Только ТолстыйКлиент!");
	#КонецЕсли

КонецПроцедуры  


#Если ТолстыйКлиентУправляемоеПриложение Тогда

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

#КонецОбласти


&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) 	Экспорт

	КонтекстЯдра = КонтекстЯдраПараметр;

	ПутьКФайлу = "Z:\MyProject\1C\base\MyHomeBase\ТЗ_169\auxiliary\products.xml" ;
	ЛожныйФайл = "Z:\MyProject\1C\base\MyHomeBase\ТЗ_169\auxiliary\test.xml" ;
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетодВыполнился_ПрочитатьФайл",
						НаборТестов.ПараметрыТеста(ПутьКФайлу ));

	НаборТестов.НачатьГруппу("ГруппаТестовПроверкаЧтенияИЗаписиДругогоФайла", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьНаЧтениеИЗаписьДругойФайл", 
				НаборТестов.ПараметрыТеста(ЛожныйФайл));
												
	НаборТестов.НачатьГруппу("ГруппаТестовПроверкаРезультатовЧтенияФайла", Истина);
	НаборТестов.Добавить("ТестДолжен_СохранитьРезультат", 
				НаборТестов.ПараметрыТеста(ПутьКФайлу), 
				"Тест должен сохранить результат  в контекст");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРезультат");											
	НаборТестов.Добавить("ТестДолжен_ПроверитьЗаполненность");

	НаборТестов.НачатьГруппу("ГруппаТестовПроверкаЗаписиДанных", Истина);
	НаборТестов.Добавить("ТестДолжен_СохранитьРезультат", 
				НаборТестов.ПараметрыТеста(ПутьКФайлу), 
				"Тест должен сохранить результат  в контекст");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетодВыполнился_СоздатьЗаписиВБазеДанных");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьСозданиеСправочника");
	НаборТестов.Добавить("ТестДолжен_ПроверитьСозданиеПВХ");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетодНеВыполнился_СозданиеПВХ");

КонецПроцедуры


#Область ТЕСТЫ

&НаКлиенте
Процедура ТестДолжен_ПроверитьМетодВыполнился_ПрочитатьФайл(ПутьКФайлу)				Экспорт

	ПутьКФайлу = ПутьКФайлу ;
	/////////////////////////////////////////////////////////////////// 
	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(ПутьКФайлу);				
	Утверждения.ПроверитьМетодВыполнился(ЭтаФорма, "ПрочитатьФайлXML", ПараметрыФункции) ;

КонецПроцедуры


#Область ГруппаТестовПроверкаЧтенияИЗаписиДругогоФайла

&НаКлиенте	
Процедура ТестДолжен_ПроверитьНаЧтениеИЗаписьДругойФайл(ЛожныйФайл)			Экспорт
	
	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(ЛожныйФайл);

	ОжидаемоеОписаниеОшибки = "Не найденно данных для записи." ;  
	Утверждения.ПроверитьМетодНеВыполнился(ЭтаФорма, "ЗаписатьДанныеНаСервере", ПараметрыФункции, ОжидаемоеОписаниеОшибки) ;
	
КонецПроцедуры

#КонецОбласти


#Область ГруппаТестовПроверкаРезультатовЧтенияФайла

&НаКлиенте
Процедура ТестДолжен_СохранитьРезультат(ПутьКФайлу)		Экспорт
	
	ПутьКФайлу = ПутьКФайлу ;	
	Рехультат = ПрочитатьФайлXML(ПутьКФайлу) ;	
	КонтекстЯдра.СохранитьКонтекст(Рехультат);
	
КонецПроцедуры


&НаКлиенте
Процедура ТестДолжен_ПроверитьРезультат()					Экспорт

	Результат = КонтекстЯдра.ПолучитьКонтекст();
	/////////////////////////////////////////////////////////////////// 
	Утверждения.ПроверитьТип(Результат, "Массив", "ПроверямоеЗначение =  Массив");
	/////////////////////////////////////////////////////////////////// 
	Утверждения.ПроверитьРавенство(Результат.Количество(), 3, "Количество Товаров должно ровняться 3");

КонецПроцедуры


&НаКлиенте
Процедура ТестДолжен_ПроверитьЗаполненность()				Экспорт

	Результат = КонтекстЯдра.ПолучитьКонтекст();

	Для Каждого Элемент Из Результат Цикл
		ДопСообщениеОшибки = СтрШаблон("%1" , Элемент.Наименование ) ;
		Утверждения.ПроверитьЗаполненность (Элемент.Наименование, ДопСообщениеОшибки) ;
		Для Каждого Свойство Из Элемент.Свойства Цикл
			Для Каждого ЭлементСвойства из Свойство Цикл 
				ДопСообщениеОшибки = СтрШаблон("По наименованию товара ""%1"", с ключом ""%2"" пустое значение ""%3""" , 
				Элемент.Наименование, ЭлементСвойства.Ключ, ЭлементСвойства.Значение ) ;
				Если ЭлементСвойства.Ключ = "СсылкаПвх" ИЛИ ЭлементСвойства.Ключ ="ПризнакНового" Тогда
					Продолжить ;
				Иначе
					Утверждения.ПроверитьЗаполненность(ЭлементСвойства.Значение, ДопСообщениеОшибки) ;
				КонецЕсли ;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла ;

КонецПроцедуры

#КонецОбласти


#Область ГруппаТестовПроверкаЗаписиДанных

&НаКлиенте
Процедура ТестДолжен_ПроверитьМетодВыполнился_СоздатьЗаписиВБазеДанных()	Экспорт

	Результат = КонтекстЯдра.ПолучитьКонтекст();

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Результат);				
	Утверждения.ПроверитьМетодВыполнился(ЭтаФорма, "СоздатьЗаписиВБазеДанных", ПараметрыФункции) ;
	
КонецПроцедуры


&НаКлиенте
Процедура ТестДолжен_ПроверитьСозданиеСправочника()			Экспорт
	
	СписокТоваров = КонтекстЯдра.ПолучитьКонтекст();
	
	Для Каждого Элемент Из СписокТоваров Цикл
		НаименованиеНоменклатуры = Элемент.Наименование ;	
		Номенклатура = СоздатьНоменклатуру(НаименованиеНоменклатуры) ;
		Утверждения.ПроверитьТип(Номенклатура, "СправочникСсылка.Номенклатура", "ПроверямоеЗначение =  Номенклатура");			
	КонецЦикла ;

КонецПроцедуры


&НаКлиенте
Процедура ТестДолжен_ПроверитьСозданиеПВХ()			Экспорт
	
	СписокТоваров = КонтекстЯдра.ПолучитьКонтекст();
	Для Каждого ЭлементСвойства Из СписокТоваров[0].Свойства Цикл
		СвойствоПВХ = СоздатьПВХ(ЭлементСвойства.Ид, ЭлементСвойства.Наименование, ЭлементСвойства.ТипЗначения ) ;			
		Утверждения.ПроверитьТип(СвойствоПВХ, "ПланВидовХарактеристикСсылка.СвойстваНоменклатуры", "ПроверямоеЗначение =  СвойстваНоменклатуры");					
	КонецЦикла ;
		
КонецПроцедуры


&НаКлиенте
Процедура ТестДолжен_ПроверитьМетодНеВыполнился_СозданиеПВХ()			Экспорт
	
	СписокТоваров = КонтекстЯдра.ПолучитьКонтекст();
	ИсключительнаяСвойство = СписокТоваров[1].Свойства[2] ;

	Для Каждого ЭлементСвойства Из СписокТоваров[0].Свойства Цикл
		СвойствоПВХ = СоздатьПВХ(ЭлементСвойства.Ид, ЭлементСвойства.Наименование, ЭлементСвойства.ТипЗначения ) ;			
	КонецЦикла ;

	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ИсключительнаяСвойство.Ид) ;
	ПараметрыМетода.Добавить(ИсключительнаяСвойство.Наименование) ;
	ПараметрыМетода.Добавить(ИсключительнаяСвойство.ТипЗначения) ;

	ОжидаемоеОписаниеОшибки = "Значение ""5"" поля ""Код"" не уникально" ;  
	// Значение "5" поля "Код" не уникально 
	Утверждения.ПроверитьМетодНеВыполнился(ЭтаФорма, "СоздатьПВХ", ПараметрыМетода, ОжидаемоеОписаниеОшибки) ;

КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область КодИзМодуляФормы

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПутьКФайлуПриИзменении(Элемент)

	Файл = Новый Файл(ПутьКФайлу) ;
	Если Не Файл.Существует() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон(" ""%1"" - файл не существует", ПутьКФайлу) ; 
		Сообщение.Сообщить(); 
		ПутьКФайлу = ПУТЬ_К_ФАЙЛУ;	
	Иначе		
		ПУТЬ_К_ФАЙЛУ = ПутьКФайлу ;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "Выберите xml файл(*.xml)|*.xml";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
		ПУТЬ_К_ФАЙЛУ = ПутьКФайлу ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ЗаписатьДанные(Команда)

	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ЗаписатьДанныеНаСервере(ПутьКФайлу);
	Иначе 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон("Выберите файл") ; 
		Сообщение.Поле = "ПутьКФайлу" ;
		Сообщение.Сообщить();
	КонецЕсли ;

КонецПроцедуры


&НаСервере
Процедура ЗаписатьДанныеНаСервере(ПутьКФайлу)					Экспорт				    
	
	СписокТоваров = ПрочитатьФайлXML(ПутьКФайлу);
	Если СписокТоваров.Количество() = 0 Тогда
		Сообщение = новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон("Не найденно данных для записи.");
		Сообщение.Сообщить();
		ВызватьИсключение(Сообщение.Текст);
	КонецЕсли;
	СоздатьЗаписиВБазеДанных(СписокТоваров) ;

КонецПроцедуры	


#Область ПарсерXML

&НаСервере
Функция ПрочитатьФайлXML(ПутьКФайлу)					Экспорт			    
	
	Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
    Построитель = Новый ПостроительDOM;
    Документ = Построитель.Прочитать(Парсер);

    СпиисокСвойств = ПолучитьСписокСвойств() ;	
    Товары = Новый Массив;

    Для Каждого Элемент0 Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл    
        Если Элемент0.ИмяУзла = "Товар" Тогда
            Товар = Элемент0;  			
            НовыйТовар = Новый Структура("Наименование, СсылкаНоменклатура, ПризнакНового, Свойства") ;  			  					
            Для Каждого Элемент1 Из Товар.ДочерниеУзлы Цикл           	
                Если Элемент1.ИмяУзла = "Наименование" Тогда           		
                    Наименование = Элемент1.ТекстовоеСодержимое ;	            		
                    НовыйТовар.Наименование = Наименование ; 
                    МассивСвойств = Новый Массив ;
                    
                ИначеЕсли Элемент1.ИмяУзла = "Свойства" Тогда           		         		
                    Свойства = Новый Структура() ;
                    Для Каждого значение из СпиисокСвойств Цикл
                        Свойства.Вставить(значение) ;						
                    КонецЦикла ; 
                    Для Каждого Элемент2 Из Элемент1.ДочерниеУзлы Цикл
                        Если Свойства.Свойство(Элемент2.ИмяУзла) Тогда
                            Свойства[Элемент2.ИмяУзла] =  Элемент2.ТекстовоеСодержимое ; ;
                        КонецЕсли ;
                    КонецЦикла ;         		
                    МассивСвойств.Добавить(Свойства) ;           		            		
                КонецЕсли;           	
                НовыйТовар.Свойства = МассивСвойств ;            	           
            КонецЦикла;
            Товары.Добавить(НовыйТовар) ;
        КонецЕсли;
    КонецЦикла;

    Парсер.Закрыть();
    Возврат Товары ;

КонецФункции


&НаСервере
Функция ПолучитьСписокСвойств()

	СписокСвойства = Новый Массив() ;         
    СписокСвойства.Добавить("Наименование");
    СписокСвойства.Добавить("Ид");
    СписокСвойства.Добавить("ТипЗначения");  
    СписокСвойства.Добавить("Значения");
    СписокСвойства.Добавить("СсылкаПвх");
    СписокСвойства.Добавить("ПризнакНового") ;

    Возврат СписокСвойства ;

КонецФункции

#КонецОбласти


&НаСервере
Процедура СоздатьЗаписиВБазеДанных(СписокТоваров)					Экспорт	    
	
	ТабДок = ЛогДействий ;
	ТабДок.Очистить(); 

	Для Каждого Элемент Из СписокТоваров Цикл
		Попытка
			НачатьТранзакцию();
			НаименованиеНоменклатуры = Элемент.Наименование ;	
			СсылкаНоменклатура = ПроверитьНоменклатуруВБазе(НаименованиеНоменклатуры) ;
			Элемент.ПризнакНового = Ложь ;
			Если Не ЗначениеЗаполнено(СсылкаНоменклатура) Тогда
				СсылкаНоменклатура = СоздатьНоменклатуру(НаименованиеНоменклатуры) ;	
				Элемент.ПризнакНового = Истина ;		
			КонецЕсли ;
			Элемент.СсылкаНоменклатура = СсылкаНоменклатура ;

			Для Каждого ЭлементСвойства из Элемент.Свойства Цикл 			
                СсылкаПвх = ПроверитьПВХВБазе(ЭлементСвойства.Ид)	;
                ЭлементСвойства.ПризнакНового = Ложь ;
                Если Не ЗначениеЗаполнено(СсылкаПвх) Тогда
                    СсылкаПвх = СоздатьПВХ(ЭлементСвойства.Ид, ЭлементСвойства.Наименование, ЭлементСвойства.ТипЗначения) ; 
                    ЭлементСвойства.ПризнакНового = Истина ;					 					
                КонецЕсли ;	
                ЭлементСвойства.СсылкаПвх = СсылкаПвх ;
            КонецЦикла;		

			СозданиеЗаписейВРегистре(Элемент) ;
			ЗафиксироватьТранзакцию();
			ВывестиВТабличныйДокумент(Элемент);

		Исключение
			ОтменитьТранзакцию();
			ТекстОшикби = ОписаниеОшибки() ;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ТекстОшикби ;
			Сообщение.Сообщить() ;
		КонецПопытки ;
	КонецЦикла ;

КонецПроцедуры


&НаСервере
Функция ПроверитьНоменклатуруВБазе(НаименованиеНоменклатуры)
	
	НоменклатураСсылка = Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеНоменклатуры);
	Возврат НоменклатураСсылка.Ссылка ;
	
КонецФункции


&НаСервере
Функция СоздатьНоменклатуру(НаименованиеНоменклатуры)					Экспорт	    

	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент() ;
	Номенклатура.Наименование = НаименованиеНоменклатуры ;
	Номенклатура.Записать(); 
	Возврат Номенклатура.Ссылка ;

КонецФункции


&НаСервере
Функция ПроверитьПВХВБазе(Код)					

	ПВХ = ПланыВидовХарактеристик.СвойстваНоменклатуры.НайтиПоКоду(Код);
	Возврат ПВХ.Ссылка ;

КонецФункции


&НаСервере
Функция СоздатьПВХ(Код, Наименование, ТипЗначения)				Экспорт			    
	
	Если ТипЗначения = "Число" Тогда
		КЧ = Новый КвалификаторыЧисла(12,2);
        Массив = Новый Массив;
        Массив.Очистить();
        Массив.Добавить(Тип("Число"));
        ТЧ = Новый ОписаниеТипов(Массив,КЧ);
	Иначе 
		КвалификаторыСтроки = Новый КвалификаторыСтроки(100);
        ТЧ = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	КонецЕсли ;

	ПВХ = ПланыВидовХарактеристик.СвойстваНоменклатуры.СоздатьЭлемент() ;
	ПВХ.Код = Код ;
	ПВХ.Наименование = Наименование ;
	ПВХ.ТипЗначения = ТЧ;
	ПВХ.Записать(); 

	Возврат ПВХ.Ссылка ;

КонецФункции


&НаСервере
Процедура СозданиеЗаписейВРегистре(Товар)			    		

	Для Каждого Элемент Из Товар.Свойства Цикл
		НаборЗаписей = РегистрыСведений.ЗначенияСвойствНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Товар.СсылкаНоменклатура);
		НаборЗаписей.Отбор.Свойство.Установить(Элемент.СсылкаПвх);

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура = Товар.СсылкаНоменклатура ;
		НоваяЗапись.Свойство = Элемент.СсылкаПвх ;
		НоваяЗапись.Значение = Элемент.Значения ;
		НаборЗаписей.Записать();
	КонецЦикла ;

КонецПроцедуры


&НаСервере
Процедура ВывестиВТабличныйДокумент(Товар)

	ТабДок = ЛогДействий ;
	Макет = Обработки.ЧтениеЗаписьXML.ПолучитьМакет("Логирование") ;
	Если Товар.ПризнакНового Тогда
		Справочник = Макет.ПолучитьОбласть("Справочник") ; 
		Справочник.Параметры.Справочник = Товар.Наименование ; 
		Справочник.Параметры.РасшифровкаСправочник = Товар.СсылкаНоменклатура ;
		ТабДок.Вывести(Справочник) ;
	КонецЕсли ;

	Для Каждого Элемент Из Товар.Свойства Цикл
		Если Элемент.ПризнакНового Тогда
			ПВХ = Макет.ПолучитьОбласть("ПВХ") ; 
			ПВХ.Параметры.ПВХ = Элемент.Наименование ; 
			ПВХ.Параметры.РасшифровкаПВХ = Элемент.СсылкаПвх ;
			ТабДок.Вывести(ПВХ) ;
		КонецЕсли ;
	КонецЦикла ;

КОнецПроцедуры

#КонецОбласти
